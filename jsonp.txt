作者：忘记那段悲伤的回忆
链接：https://www.zhihu.com/question/28890257/answer/323417863
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

jsonp跨域是经过动态增加script标签完成跨域的 因为script标签只能发送get恳求 所以jsonp不支撑post办法的跨域JavaScript是一种在Web开发中常常运用的前端动态脚本技能。在JavaScript中，有一个很重要的安全性约束，被称为“Same-Origin Policy”（同源战略）。这一战略关于JavaScript代码能够拜访的页面内容做了很重要的约束，即JavaScript只能拜访与包含它的文档在同一域下的内容。 JavaScript这个安全战略在进行多iframe或多窗口编程、以及Ajax编程时显得尤为重要。依据这个战略，在http://baidu.com下的页面中包含的JavaScript代码，不能拜访在http://google.com域名下的页面内容；甚至不同的子域名之间的页面也不能经过JavaScript代码相互拜访。关于Ajax的影响在于，经过XMLHttpRequest完成的Ajax恳求，不能向不同的域提交恳求，例如，在http://abc.example.com下的页面，不能向http://def.example.com提交Ajax恳求，等等。 但是，当进行一些比较深化的前端编程的时候，不行避免地需要进行跨域操作，这时候“同源战略”就显得过于严苛。JSONP跨域GET恳求是一个常用的处理方案，下面咱们来看一下JSONP跨域是怎么完成的，而且讨论下JSONP跨域的原理。 利用在页面中创建<script>节点的办法向不同域提交HTTP恳求的办法称为JSONP，这项技能能够处理跨域提交Ajax恳求的问题。JSONP的作业原理如下所述： 假设在http://example1.com/index.php这个页面中向http://example2.com/getinfo.php提交GET恳求，咱们能够将下面的JavaScript代码放在http://example1.com/index.php这个页面中来完成： 仿制代码 代码如下: var eleScript= document.createElement("script"); eleScript.type = "text/javascript"; eleScript.src = "http://example2.com/getinfo.php"; document.getElementsByTagName("HEAD")[0].appendChild(eleScript);  当GET恳求从http://example2.com/getinfo.php回来时，能够回来一段JavaScript代码，这段代码会主动履行，能够用来负责调用http://example1.com/index.php页面中的一个callback函数。 JSONP的长处是：它不像XMLHttpRequest目标完成的Ajax恳求那样遭到同源战略的约束；它的兼容性更好，在愈加陈旧的浏览器中都能够运转，不需要XMLHttpRequest或ActiveX的支撑；而且在恳求结束后能够经过调用callback的办法回传成果。 JSONP的缺陷则是：它只支撑GET恳求而不支撑POST等其它类型的HTTP恳求；它只支撑跨域HTTP恳求这种状况，不能处理不同域的两个页面之间怎么进行JavaScript调用的问题。 再来一个比如： 仿制代码 代码如下: var qsData = {'searchWord':$("#searchWord").attr("value"),'currentUserId': $("#currentUserId").attr("value"),'conditionBean.pageSize':$("#pageSize").attr("value")}; $.ajax({ async:false, url: http://跨域的dns/document!searchJSONResult.action, type: "GET", dataType: 'jsonp', jsonp: 'jsoncallback', data: qsData, timeout: 5000, beforeSend: function(){ //jsonp 办法此办法不被触发.原因可能是dataType假如指定为jsonp的话,就现已不是ajax事情了 }, success: function (json) {//客户端jquery预先界说好的callback函数,成功获取跨域服务器上的json数据后,会动态履行这个callback函数 if(json.actionErrors.length!=0){ alert(json.actionErrors); } genDynamicContent(qsData,type,json); }, complete: function(XMLHttpRequest, textStatus){ $.unblockUI({ fadeOut: 10 }); }, error: function(xhr){ //jsonp 办法此办法不被触发.原因可能是dataType假如指定为jsonp的话,就现已不是ajax事情了 //恳求犯错处理 alert("恳求犯错(请查看相关度网络状况.)"); } }); 有时也会看到这样的写法： $.getJSON("http://跨域的dns/document!searchJSONResult.action?name1=" value1 "&jsoncallback=?", function(json){ if(json.特点名==值){ // 履行代码 } });  这种办法其实是上例$.ajax({..}) api的一种高档封装，有些$.ajax api底层的参数就被封装而不行见了。 这样，jquery就会拼装成如下的url get恳求： 仿制代码 代码如下: http://跨域的dns/document!searchJSONResult.action?&jsoncallback=jsonp1236827957501&_=1236828192549&searchWord= 用例¤tUserId=5351&conditionBean.pageSize=15  在呼应端(http://跨域的dns/document!searchJSONResult.action)，经过 jsoncallback = request.getParameter("jsoncallback") 得到jquery端随后要回调的js function name:jsonp1236827957501 然后 response的内容为一个Script Tags:"jsonp1236827957501(" 按恳求参数生成的json数组 ")"; jquery就会经过回调办法动态加载调用这个js tag:jsonp1236827957501(json数组); 这样就到达了跨域数据交换的目的。 JSONP原理 JSONP的最基本的原理是：动态增加一个<script>标签，而script标签的src特点是没有跨域的约束的。这样说来，这种跨域办法其实与ajax XmlHttpRequest协议无关了。 这样其实"jQuery AJAX跨域问题"就成了个伪出题，jquery $.ajax办法名有误导人之嫌。 假如设为dataType: 'jsonp'，这个$.ajax办法就和ajax XmlHttpRequest没什么关系了，取而代之的则是JSONP协议。JSONP是一个非官方的协议，它答应在服务器端集成Script tags回来至客户端，经过javascript callback的办法完成跨域拜访。 JSONP即JSON with Padding。因为同源战略的约束，XmlHttpRequest只答应恳求当时源（域名、协议、端口）的资源。假如要进行跨域恳求， 咱们能够经过运用html的script符号来进行跨域恳求，并在呼应中回来要履行的script代码，其间能够直接运用JSON传递javascript目标。 这种跨域的通讯办法称为JSONP。 jsonCallback 函数jsonp1236827957501(....)：是浏览器客户端注册的，获取跨域服务器上的json数据后，回调的函数 Jsonp的履行进程如下： 首先在客户端注册一个callback (如:'jsoncallback'), 然后把callback的姓名(如:jsonp1236827957501)传给服务器。留意：服务端得到callback的数值后，要用jsonp1236827957501(......)把即将输出的json内容包含起来，此刻，服务器生成 json 数据才干被客户端正确接收。 然后以 javascript 语法的办法，生成一个function， function 姓名就是传递上来的参数 'jsoncallback'的值 jsonp1236827957501 . 最终将 json 数据直接以入参的办法，放置到 function 中，这样就生成了一段 js 语法的文档，回来给客户端。 客户端浏览器，解析script标签，并履行回来的 javascript 文档，此刻javascript文档数据，作为参数， 传入到了客户端预先界说好的 callback 函数(如上例中jquery $.ajax()办法封装的的success: function (json))里。 能够说jsonp的办法原理上和<script src="http://跨域/...xx.js"></script>是共同的(qq空间就是很多选用这种办法来完成跨域数据交换的)。JSONP是一种脚本注入(Script Injection)行为，所以有必定的安全隐患。 那jquery为什么不支撑post办法跨域呢？ 尽管选用post 动态生成iframe是能够到达post跨域的目的(有位js牛人就是这样把jquery1.2.5 打patch的)，但这样做是一个比较极点的办法，不主张选用。 也能够说get办法的跨域是合法的，post办法从安全角度上，被认为是不合法的，万不得已仍是不要剑走偏锋。 client端跨域拜访的需求看来也引起w3c的留意了，看资料说html5 WebSocket规范支撑跨域的数据交换，应该也是一个将来可选的跨域数据交换的处理方案。 来个超简略的比如： 仿制代码 代码如下: <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" > <head> <title>Test Jsonp</title> <script type="text/javascript"> function jsonpCallback(result) { alert(result.msg); } </script> <script type="text/javascript" src="http://crossdomain.com/jsonServerResponse?jsonp=jsonpCallback"></script> </head> <body> </body> </html>  其间 jsonCallback 是客户端注册的，获取跨域服务器上的json数据后，回调的函数。http://crossdomain.com/jsonServerResponse?jsonp=jsonpCallback 这个 url 是跨域服务器取 json 数据的接口，参数为回调函数的姓名，回来的格局为：jsonpCallback({msg:'this is json data'}) 简述原理与进程：首先在客户端注册一个callback, 然后把callback的姓名传给服务器。此刻，服务器先生成 json 数据。 然后以 javascript 语法的办法，生成一个function , function 姓名就是传递上来的参数 jsonp。最终将 json 数据直接以入参的办法，放置到 function 中，这样就生成了一段 js 语法的文档，回来给客户端。 客户端浏览器，解析script标签，并履行回来的 javascript 文档，此刻数据作为参数，传入到了客户端预先界说好的 callback 函数里。（动态履行回调函数）